apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'


compileJava {
    targetCompatibility = 1.7
    sourceCompatibility = 1.7
}

group               = "co.paralleluniverse"
version             = "0.1.1-SNAPSHOT"
status              = "integration"
description         = "Java FileSystem as FUSE"
ext.url             = "http://puniverse.github.com/javafs"
ext.vendor          = "Parallel Universe Software Co."
ext.licenseName     = "GNU General Public License, version 2, with the Classpath Exception"
ext.licenseUrl      = "http://openjdk.java.net/legal/gplv2+ce.html"
ext.scmUrl          = "https://github.com/puniverse/javafs"
ext.scmConnection   = "https://github.com/puniverse/javafs.git"


repositories {
    mavenCentral()
}

dependencies {
    compile 'com.github.jnr:jnr-ffi:2.0.3'    
    compile 'com.github.jnr:jnr-posix:3.0.17'
    
    testCompile 'junit:junit:4.12'
    testCompile 'org.truth0:truth:0.23'
    testCompile 'com.google.jimfs:jimfs:1.0'
}

javadoc {
    options {
        links = [ "http://docs.oracle.com/javase/7/docs/api/" ]
        noDeprecated = true
        addStringOption('public', '-quiet')
    }
    excludes = [
        "co/paralleluniverse/fuse/**",
        "co/paralleluniverse/filesystem/**",
        "jnr/**",
    ]
}

task sourceJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from 'build/docs/javadoc'
}

artifacts {
    archives javadocJar
    archives sourceJar
}


uploadArchives {
    repositories.mavenDeployer {

        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

        repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
            authentication(userName: sonatypeUsername, password: sonatypePassword)
        }

        snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
            authentication(userName: sonatypeUsername, password: sonatypePassword)
        }

        pom.project {
            name 'microdb-runtime'
            description 'Runtime for MicroDb'
            url 'https://github.com/puniverse/javafs'

            scm {
                url 'scm:git@github.com/puniverse/javafs.git'
                connection 'scm:git@github.com/puniverse/javafs.git'
                developerConnection 'scm:git@github.com/puniverse/javafs.git'
            }

            licenses {
                license {
                    name project.licenseName
                    url project.licenseUrl
                    distribution 'repo'
                }
            }

            developers {
                developer {
                    id 'pron'
                    name 'Ron Pressler'
                }
            }
        }

    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.4'
}


task('run', type: JavaExec, dependsOn:[testClasses]) {
    classpath = sourceSets.main.runtimeClasspath + sourceSets.test.runtimeClasspath
    
    main = 'co.paralleluniverse.javafs.Main'
    
    if(project.hasProperty('args')){
        args project.args.split('\\s+')
    }
    
    // systemProperty 'jnr.ffi.compile.dump', 'true'
}

